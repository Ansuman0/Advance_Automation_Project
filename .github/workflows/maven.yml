name: Build and Publish Docker image

on:
  push:
    branches:
      - codeql-newtesting
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build_and_publish:
    name: Build & push Docker image
    runs-on: ubuntu-latest

    outputs:
      id: random_tag
      value: ${{ steps.generate_random_number.outputs.random_number }}

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Random Number
        id: generate_random_number
        run: echo "::set-output name=random_number::$(shuf -i 0-9 -n 1)"

      - name: Set up JDK and Maven
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          languages: ${{ matrix.language }}
          
      - name: Install ESLint
        run: |
          npm install eslint@8.10.0
          npm install @microsoft/eslint-formatter-sarif@2.1.7
      - name: Run ESLint
        run: npx eslint .
          --config .eslintrc.js
          --ext .js,.jsx,.ts,.tsx
          --format @microsoft/eslint-formatter-sarif
          --output-file eslint-results.sarif
        continue-on-error: true
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          category: "/language:${{matrix.language}}"

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true 
          
      - name: Build with Maven
        run: mvn -B clean install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        id: build_image
        run: |
          DOCKER_TAG="latest-V${{ steps.generate_random_number.outputs.random_number }}"
          docker build -t ansumansing/automation-project:${DOCKER_TAG} \
            --build-arg CODEQL_RESULTS_TAR=codeql_results.tar.gz .
          echo "::set-output name=image_tag::${DOCKER_TAG}"

      - name: Push Docker image
        run: |
          docker push ansumansing/automation-project:${{ steps.build_image.outputs.image_tag }}
